{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","useState","color","backgroundColor","border","myStyle","setMyStyle","btnText","setBtnText","className","style","class","id","type","onClick","Navbar","mode","to","title","aboutText","toggleMode","role","htmlFor","text","TextForm","setText","heading","onChange","event","console","log","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","setInterval","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e4d5b185.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    const [myStyle, setMyStyle]  = useState({\r\n        color : 'black',\r\n        backgroundColor : 'white',\r\n        border : '2px solid white'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Light Mode\")\r\n\r\n    const toggleStyle = () => {\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                color : 'black',\r\n                backgroundColor : 'white',\r\n                border : '1px solid black'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n       \r\n      \r\n        else{\r\n            setMyStyle({\r\n                color : 'white',\r\n                backgroundColor : '#13013d',\r\n                border : '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n    }\r\n\r\n\r\n     \r\n    return (\r\n        <div className=\"container mt-4\" style={myStyle}>\r\n            <h1 className=\"my-3\">About us</h1>\r\n            <div class=\"accordion my-1\" id=\"accordionExample\">\r\n  <div class=\"accordion-item\" style={myStyle}>\r\n    <h2 class=\"accordion-header\" id=\"headingOne\">\r\n      <button style={myStyle} class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\" style={myStyle}>\r\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n      <button style={myStyle} class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\" style={myStyle}>\r\n    <h2 class=\"accordion-header\" id=\"headingThree\">\r\n      <button style={myStyle} class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n        <div className=\"container my-3\">\r\n            <button type=\"button\" onClick={toggleStyle} className=\"btn btn-warning mb-2\">{btnText}</button>\r\n        </div>\r\n</div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n              \r\n             </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            {/* <form className=\"form-check form-switch text-light\">\r\n              <input className=\"form-check-input\" type=\"checkbox\" id='flexSwitchCheckDefault' />\r\n              <label className=\"form-check-lable\" for=\"flewSwitchCheckDefault\">Enable DarkMode</label>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">{props.text} Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : 'Set title here',\r\n    aboutText: 'Set about text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked!\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"info\");\r\n    }\r\n    const handleDownClick = () => {\r\n        console.log(\"LowerCase was clicked!\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"warning\");\r\n    }\r\n    const handleClearClick = () => {\r\n        console.log(\"LowerCase was clicked!\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Textbox has been cleared\", \"danger\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On change!\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces has been removed\",\"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text has been copied to clipboard\", \"secondary\");\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    // setText(\"Dont enter text here\");\r\n    return (\r\n        <>\r\n        <div className='container' style={{color : props.mode==='dark'?'white':'#4f16df'}}>\r\n            <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style={{backgroundColor : props.mode==='dark'?'#130a29':'white', color: props.mode==='dark'?'white':'black'}} onChange={handleOnChange} value={text} id=\"exampleFormControlTextarea1\" rows=\"7\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-info mx-2\" onClick={handleUpClick}  >Convert to Uppercase</button>\r\n        <button className=\"btn btn-warning mx-1\" onClick={handleDownClick}  >Convert to Lowercase</button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}  >Click to Clear Text</button>\r\n        <button className=\"btn btn-secondary mx-2\" onClick={handleCopy}  >Click to Copy Text to clipboard</button>\r\n        <button className=\"btn btn-success mx-2\" onClick={handleExtraSpaces}  >Click to Remove Extra Spaces.</button>\r\n    </div>\r\n    <div className=\"className my-3\" style={{color : props.mode==='dark'?'white':'#130a29'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read.</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here.\"}</p> \r\n    </div>\r\n    </>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n    </div>\r\n    )\r\n}\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route,\n    Link\n    \n} from \"react-router-dom\";\n\n\n\n\n\n// let name = \"Abhi\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [text, setText] = useState('Enable');\n  const [alert, setAlert]  = useState(null);\n\n  const showAlert = (message, type) => {\n      setAlert({\n        msg: message,\n        type : type\n      })\n      setTimeout(() => {\n        setAlert(null)\n      }, 2000);\n  }\n  \n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      setText('Disable');\n      document.body.style.backgroundColor = '#130a29';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // document.body.style.color = 'white';\n      setInterval(() => {\n        document.title = \"TextUtils is Amazing Mode\";\n      }, 3500);\n      setInterval(() => {\n        document.title = \"Install TextUtils Now\";\n      }, 1500)\n    }\n    else {\n      setMode('light');\n      setText('Enable');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n      // document.body.style.color = 'black';\n    }\n  }\n  return (\n    <>\n   {/* <Navbar /> */}\n   <Router>\n\n   <Navbar title= \"TextUtils\" text = {text} toggleMode = {toggleMode} aboutText = \"About-us\" mode = {mode} />\n   <Alert alert = {alert} />\n   <div className=\"container my-3\">\n   <Routes>\n          <Route exact path=\"/about\" element={<About mode = {mode} />} />\n            \n        \n          <Route exact path=\"/\" element={  <TextForm showAlert = {showAlert} heading = \"Enter the text to analyze below\" mode={mode} /> } />\n              {/* <TextForm showAlert = {showAlert} heading = \"Enter the text to analyze below\" mode={mode} /> */}\n          \n  </Routes>\n  </div>\n  </Router>\n</>\n   \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}